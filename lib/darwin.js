// Generated by CoffeeScript 1.10.0
(function () {
  var AirPortBinary, connectionStateMap, parsePatterns, powerStateMap;

  AirPortBinary = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport";

  parsePatterns = {
    airport_line: new RegExp(/(.+): (.+)/)
  };

  connectionStateMap = {
    init: "disconnected",
    running: "connected"
  };

  powerStateMap = {
    On: true,
    Off: false
  };

  module.exports = {
    autoFindInterface: function () {
      var _iface, _interface, _msg, findInterfaceCom;
      this.WiFiLog("Host machine is MacOS.");
      findInterfaceCom = "networksetup -listallhardwareports | grep \"Wi-Fi\" -A 1";
      this.WiFiLog("Executing: " + findInterfaceCom);
      _interface = this.execSync(findInterfaceCom);
      if (_interface) {
        let ifaceObj = {
          "name": null,
          "driver": null
        }
        _iface = _interface.trim();
        if (_iface.includes("--")) {
          _iface = _iface.replace("--", "");
        }
        _iface = _iface.split('\n');
        _iface = _iface.filter((e) => { 
          return e != ""; 
        });
        let ifaceArr = [];
        let ifaceNum = 0;
        for (let i = 0; i < _iface.length; i++) {
          let paresline = parsePatterns.airport_line.exec(_iface[i]);
          let KEY = paresline[1];
          let VALUE = paresline[2];
          switch (KEY) {
            case "Hardware Port":
              ifaceObj.driver = VALUE;
              break;
            case "Device":
              ifaceObj.name = VALUE;
              ifaceArr[ifaceNum] = JSON.parse(JSON.stringify(ifaceObj));
              ifaceNum++;
              break;
            default:
              break;
          }
        }
        _msg = ifaceArr;
        this.WiFiLog(_msg);
        return {
          success: true,
          msg: _msg,
          "interface": ifaceArr // return array
        };
      } else {
        _msg = "Error: No network interface found.";
        this.WiFiLog(_msg, true);
        return {
          success: false,
          msg: _msg,
          "interface": null
        };
      }
    },
    getIfaceState: function () {
      var KEY, VALUE, connectionData, error, error1, error2, i, interfaceState, k, len, ln, parsedLine, powerData, ref;
      let allInterfaces = [];
      let adapterNumber = -1;
      interfaceState = {};
      connectionData = this.execSync(AirPortBinary + " -I");
      console.log(connectionData);
      ref = connectionData.split('\n');
      for (k = i = 0, len = ref.length; i < len; k = ++i) {
        ln = ref[k];
        try {
          parsedLine = parsePatterns.airport_line.exec(ln.trim());
          KEY = parsedLine[1];
          VALUE = parsedLine[2];
        } catch (error1) {
          error = error1;
          continue;
        }
        switch (KEY) {
          case "state":
            interfaceState.connection = connectionStateMap[VALUE];
            break;
          case "SSID":
            interfaceState.ssid = VALUE;
            adapterNumber++;
        }
        if (KEY === "SSID") {
          break;
        }
      }
      powerData = this.execSync("networksetup -getairportpower " + this.WiFiControlSettings.iface);
      try {
        parsedLine = parsePatterns.airport_line.exec(powerData.trim());
        KEY = parsedLine[1];
        VALUE = parsedLine[2];
      } catch (error2) {
        error = error2;
        return {
          success: false,
          msg: "Unable to retrieve state of network interface " + this.WiFiControlSettings.iface + "."
        };
      }
      interfaceState.power = powerStateMap[VALUE];
      if (adapterNumber >= 0) {
        allInterfaces[adapterNumber] = interfaceState;
      }
      return allInterfaces;
    },
    connectToAP: function (_ap, iface) {
      var COMMANDS, _msg, com, connectToAPChain, error, error1, i, len, stdout;
      COMMANDS = {
        connect: "networksetup -setairportnetwork " + iface + " \"" + _ap.ssid + "\""
      };
      if (_ap.password.length) {
        COMMANDS.connect += " \"" + _ap.password + "\"";
      }
      connectToAPChain = ["connect"];
      for (i = 0, len = connectToAPChain.length; i < len; i++) {
        com = connectToAPChain[i];
        this.WiFiLog("Executing:\t" + COMMANDS[com]);
        try {
          stdout = this.execSync(COMMANDS[com]);
        } catch (error1) {
          error = error1;
        }
        if (stdout === ("Could not find network " + _ap.ssid + ".")) {
          _msg = "Error: No network called " + _ap.ssid + " could be found.";
          this.WiFiLog(_msg, true);
          return {
            success: false,
            msg: _msg
          };
        }
        this.WiFiLog("Success!");
      }
    },
    resetWiFi: function () {
      var COMMANDS, _msg, com, i, len, resetWiFiChain, results, stdout;
      COMMANDS = {
        enableAirport: "networksetup -setairportpower " + this.WiFiControlSettings.iface + " on",
        disableAirport: "networksetup -setairportpower " + this.WiFiControlSettings.iface + " off"
      };
      resetWiFiChain = ["disableAirport", "enableAirport"];
      results = [];
      for (i = 0, len = resetWiFiChain.length; i < len; i++) {
        com = resetWiFiChain[i];
        this.WiFiLog("Executing:\t" + COMMANDS[com]);
        stdout = this.execSync(COMMANDS[com]);
        _msg = "Success!";
        results.push(this.WiFiLog(_msg));
      }
      return results;
    }
  };

}).call(this);
